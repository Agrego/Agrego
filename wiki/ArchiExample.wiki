#summary Example of ADSL link aggregation

= The architecture =

I want to aggregate 2 ADSL links as describe in the draw below:

http://daligro.net/agrego/example-adsl-architecture.png

Notes: in this configuration the distant endpoint have only one network interface and only one IP address.

On each agrego endpoint, the agrego daemon create a TUN interface. The IP addresses given to these interfaces can be configured in the agrego.ini file. On this example, the IP adresses will be:
 * on local endpoint: 10.0.0.1
 * on distant endpoint: 10.0.0.2

All the configuration here works in my home but according your network configuration a lot of things can changes.

= The Configuration =

== Route configuration ==

As explained here : [http://lartc.org/lartc.html#LARTC.RPDB.MULTIPLE-LINK 4.2. Routing for multiple uplinks/providers], I do some route configuration to allow my *local Agrego endpoint* to use several ADSL connection.
To be simple it says what comes by this network interface will go back by the same network interface.

I added the 2 lines below in the file : _/etc/iproute2/rt_tables_
{{{
1 T1
2 T2
}}}

Create a file with this content, you can put it everywhere you want, in my home it's _/root/route.sh_:
{{{
IP1=192.168.0.1
P1_NET=192.168.0.0
P1=192.168.0.253
IF1=eth0

IP2=192.168.0.2
P2_NET=192.168.0.0
P2=192.168.0.254
IF2=eth1

ip route add $P1_NET dev $IF1 src $IP1 table T1
ip route add default via $P1 table T1
ip route add $P2_NET dev $IF2 src $IP2 table T2
ip route add default via $P2 table T2

ip route add $P1_NET dev $IF1 src $IP1
ip route add $P2_NET dev $IF2 src $IP2

ip rule add from $IP1 table T1
ip rule add from $IP2 table T2
}}}

And I launch this file at each boot by editing my _/etc/rc.local_ file (in debian):
{{{
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# add route for agrego
bash /root/route.sh

exit 0
}}}

*Important*
Remember that you must not have a default route, otherwise you will only use this route.

== agrego.ini ==

I put here only the part which is related to the network configuration.

The Agrego tunnel:

{{{
[Interfaces]

# Number of modem connected to the local Agrego server
# int - 1
number_of_interfaces = 1

# name of the agrego device (the virtual interface)
# string - agrego0
tun_dev_name = agrego_ligro

# ip address of the agrego virtual interface on the local endpoint
# string - 10.0.0.1
local_agrego_ip_add = 10.0.0.1

# ip address of the agrego virtual interface on the distant endpoint
# string - 10.0.0.2
distant_agrego_ip_add = 10.0.0.2
}}}

The 2 links you want to aggregate

{{{
[Link_1]
# configuration of a link between 2 endpoint

# public ip address on the local endpoint
# string - no default value
local_ip_address_public = 88.185.136.13

# private ip address on the local endpoint
# if not defined the public address will be used
# string - no default value
local_ip_address_private = 192.168.0.1

# port on the local endpoint
# string - no default value
local_port = 2000

# public ip address on the distant endpoint
# string - no default value
distant_ip_address_public = 87.98.187.237

# port on the distant endpoint
# string - no default value
distant_port = 2000

# coefficient of this interface, used for weighting this link with the others
# int - default 1
coefficient = 1

[Link_2]
# configuration of a link between 2 endpoint

# public ip address on the local endpoint
# string - no default value
local_ip_address_public = 88.185.136.14

# private ip address on the local endpoint
# if not defined the public address will be used
# string - no default value
local_ip_address_private = 192.168.0.2

# port on the local endpoint
# string - no default value
local_port = 2001

# public ip address on the distant endpoint
# string - no default value
distant_ip_address_public = 87.98.187.237

# port on the distant endpoint
# string - no default value
distant_port = 2001

# coefficient of this interface, used for weighting this link with the others
# int - default 1
coefficient = 2
}}}

Because the link 2 have a coefficient of 2, instead of 1 for the link 1. Agrego will send 2 times more packets on the link 2 than on the link 1.

If the modems are NATed router, they have to be configured to to forward port on UDP like this:
 * modem1: from 88.185.136.13:2000 to 192.168.0.1:2000
 * modem2: from 88.185.136.14:2001 to 192.168.0.2:2001

for example for the modem1 the iptable rules can be (if eth1 is the interface with the IP 88.185.136.13):
{{{
iptables -t nat -A PREROUTING -p udp -i eth1 -d 88.185.136.13 --dport 2000 -j DNAT --to 192.168.0.1:2000
}}}

== NAT ==

I put NAT in my local endpoint as in my distant endpoint. Here are examples where IP are the same as in agrego.ini.

=== distant ===

_/root/nat.sh_
{{{
#!/bin/bash

# flush NAT
iptables -F
iptables -F -t nat
iptables -X
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT

# add NAT
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source 87.98.187.237
iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT
}}}

=== local ===

_/root/nat.sh_
{{{
#!/bin/bash

# flush NAT
iptables -F
iptables -F -t nat
iptables -X
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT

# add NAT
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source 10.0.0.1
iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT
}}}