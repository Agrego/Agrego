#summary Example of ADSL link aggregation

= The architecture =

I want to aggregate 2 ADSL links as describe in the draw below:

_The draw is comming soon_

All the configuration here works in my home but according your network configuration a lot of things can changes. If you have question, ask the mailing list agrego@googlegroups.com.

= The Configuration =

== Route configuration ==

As explained here : [http://lartc.org/lartc.html#LARTC.RPDB.MULTIPLE-LINK 4.2. Routing for multiple uplinks/providers], I do some route configuration to allow my *local Agrego endpoint* to use several ADSL connection.
To be simple it says what comes by this network interface will go back by the same network interface.

I added the 2 lines below in the file : _/etc/iproute2/rt_tables_
{{{
1 T1
2 T2
}}}

Create a file with this content, you can put it everywhere you want, in my home it's _/root/route.sh_:
{{{
IP1=192.168.0.1
P1_NET=192.168.0.0
P1=192.168.0.254
IF1=eth0

IP1=192.168.0.2
P1_NET=192.168.0.0
P1=192.168.0.254
IF1=eth1

ip route add $P1_NET dev $IF1 src $IP1 table T1
ip route add default via $P1 table T1
ip route add $P2_NET dev $IF2 src $IP2 table T2
ip route add default via $P2 table T2

ip route add $P1_NET dev $IF1 src $IP1
ip route add $P2_NET dev $IF2 src $IP2

ip rule add from $IP1 table T1
ip rule add from $IP2 table T2
}}}

And I launch this file at each boot by editing my _/etc/rc.local_ file (in debian):
{{{
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# add route for agrego
bash /root/route.sh

exit 0
}}}

*Important*
Remember that you must not have a default route, otherwise you will only use this route.

== agrego.ini ==

{{{
#;;;;;;;;;;;;;;;;;;;
# About Agrego.ini ;
#;;;;;;;;;;;;;;;;;;;
# This file is used by Agr√©Go to set his configuration.
}}}

The private key should be changed

{{{
[Network]

# the private key used to do handshake between the to server
# string -
private_key = xxxxxxxxxxx

# the MTU to use (size to read on Agrego interface and on the agregated interfaces)
# int - 1504
MTU = 1504
}}}

The Agrego tunnel:

{{{
[Interfaces]

# Number of modem connected to the local Agrego server
# int - 1
number_of_interfaces = 1

# name of the agrego device (the virtual interface)
# string - agrego0
tun_dev_name = agrego_ligro

# ip address of the agrego virtual interface on the local endpoint
# string - 10.0.0.1
local_agrego_ip_add = 10.0.0.1

# ip address of the agrego virtual interface on the distant endpoint
# string - 10.0.0.2
distant_agrego_ip_add = 10.0.0.2
}}}

Links you want to aggregate

{{{
[Link_1]
# configuration of a link between 2 endpoint

# public ip address on the local endpoint
# string - no default value
local_ip_address_public = 88.185.136.13

# private ip address on the local endpoint
# if not defined the public address will be used
# string - no default value
local_ip_address_private = 192.168.0.1

# port on the local endpoint
# string - no default value
local_port = 2000

# public ip address on the distant endpoint
# string - no default value
distant_ip_address_public = 87.98.187.237

# port on the distant endpoint
# string - no default value
distant_port = 2000

# coefficient of this interface, used for weighting this link with the others
# int - default 1
coefficient = 1

[Link_2]
# configuration of a link between 2 endpoint

# public ip address on the local endpoint
# string - no default value
local_ip_address_public = 88.185.136.14

# private ip address on the local endpoint
# if not defined the public address will be used
# string - no default value
local_ip_address_private = 192.168.0.2

# port on the local endpoint
# string - no default value
local_port = 2001

# public ip address on the distant endpoint
# string - no default value
distant_ip_address_public = 87.98.187.237

# port on the distant endpoint
# string - no default value
distant_port = 2001

# coefficient of this interface, used for weighting this link with the others
# int - default 1
coefficient = 2
}}}

Failure detection and rehabilitation

{{{
[Failure_detection]

# the interval of the ping in second
# don't touch unless you know what you are doing
# double - 0.5
ping_interval = 0.5

# the time after which the link is detected as failed in second
# double - 1.5
time = 1.5

[Connection_rehabilitation]

# Time in minutes waited between tries for the first wave of attempts of reconnection
# int - default = 5
wave_1_attempt_time = 0

# Tries number of attempts of the first wave of reconnection
# int - default = 4
wave_1_tries = -1

# Time in minutes waited between tries for the second wave of attempts of ;reconnection
# int - default = 20
wave_2_attempt_time = 0

# Tries number of attempts of the second wave of reconnection
# int - default = 3
wave_2_tries = -1

# Time in minutes waited between tries for the third wave of attempts of reconnection
# int - default = 60
wave_3_attempt_time = 0

# Tries number of attempts of the third wave of reconnection
# int - default = -1
wave_3_tries = -1
}}}

The logging system use syslog by default

{{{
[Logs]

# use syslog
# can be 0 or 1
# int default = 0
use_syslog = 1

# Log level
# 7 Levels exist the same as the syslog level
# int - default = 2
#
# Levels :
# LOG_EMERG	0	/* system is unusable */
# LOG_ALERT	1	/* action must be taken immediately */
# LOG_CRIT	2	/* critical conditions */
# LOG_ERR	3	/* error conditions */
# LOG_WARNING	4	/* warning conditions */
# LOG_NOTICE	5	/* normal but significant condition */
# LOG_INFO	6	/* informational */
# LOG_DEBUG	7	/* debug-level messages */
level = 6

# the log filename
# string - /var/log/agrego.log
# filename = 
}}}

== NAT ==

I put NAT in my local endpoint as in my distant endpoint. Here are examples where IP are the same as in agrego.ini.

_draw of changes in a paquet which go through Agrego, coming soon_

=== distant ===

_/root/nat.sh_
{{{
#!/bin/bash

# flush NAT
iptables -F
iptables -F -t nat
iptables -X
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT

# add NAT
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source 87.98.187.237
iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT
}}}

=== local ===

_/root/nat.sh_
{{{
#!/bin/bash

# flush NAT
iptables -F
iptables -F -t nat
iptables -X
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT

# add NAT
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source 10.0.0.1
iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT
}}}